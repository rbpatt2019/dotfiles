let $FZF_PATH=system('command -v fzf')
set rtp+=$FZF_PATH

if $FZF_PATH =~ 'usr'
  source /usr/share/doc/fzf/examples/fzf.vim
else
  source /opt/local/share/fzf/vim/plugin/fzf.vim 
endif

let mapleader = ' '
let maplocalleader = ','
filetype on
filetype plugin on
filetype plugin indent on
set splitright
set splitbelow
set encoding=utf8
set number
set scrolloff=2
set incsearch
set nohlsearch
set ignorecase
set smartcase
set noshowmatch
set noshowmode
set noruler
set smarttab
set expandtab
set fileformat=unix
set twk=<C-w>
set tws="15*0"
set timeoutlen=333
set updatetime=100
set signcolumn=yes
set laststatus=2
set pyxversion=2
set completeopt=noinsert,menuone,noselect
set shortmess+=F
set cmdheight=1
set foldmethod=indent
syntax on

" Colorschemes
let g:gruvbox_bold = 1
let g:gruvbox_italic = 1
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_sign_column = 'bg0'
autocmd vimenter * ++nested colorscheme gruvbox
autocmd vimenter * ++nested set background=dark
set termguicolors

" Slightly improved folds
" If zO opens all children, then zC should close all children (not parents!)
nnoremap zC zxzc

" Easy motion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_skipfoldedline = 0
let g:EasyMotion_startofline = 0
nmap s <Plug>(easymotion-s)
nmap n <Plug>(easymotion-vim-n)
nmap N <Plug>(easymotion-vim-N)
nmap t <Plug>(easymotion-bd-tl)
nmap f <Plug>(easymotion-bd-fl)
nmap e <Plug>(easymotion-bd-el)
nmap w <Plug>(easymotion-bd-wl)
nmap j <Plug>(easymotion-j)
nmap k <Plug>(easymotion-k)
vmap t <Plug>(easymotion-bd-tl)
vmap f <Plug>(easymotion-bd-fl)
vmap w <Plug>(easymotion-bd-wl)
vmap e <Plug>(easymotion-bd-el)
vmap j <Plug>(easymotion-j)
vmap k <Plug>(easymotion-k)

" Vim-cutlass: deleting no longer goes to register
nnoremap q d
xnoremap q d
nnoremap qq dd
nnoremap Q D

" Which key
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :WhichKey ','<CR>
autocmd FileType which_key highlight WhichKey ctermbg=0 ctermfg=13
autocmd FileType which_key highlight WhichKeySeperator ctermbg=0 ctermfg=13
autocmd FileType which_key highlight WhichKeyGroup cterm=bold ctermbg=0 ctermfg=13
autocmd FileType which_key highlight WhichKeyDesc ctermbg=0 ctermfg=13
autocmd FileType which_key highlight WhichKeyFloating ctermbg=0 ctermfg=13

" Finding things
" relevant mapping is <leader>f*
nnoremap <leader>fb :w<CR>:CocCommand fzf-preview.Buffers<CR>
nnoremap <leader>fc :w<CR>:CocList cmdhistory<CR>
nnoremap <leader>ff :w<CR>:CocCommand fzf-preview.ProjectFiles<CR>
nnoremap <leader>fh :w<CR>:CocList helptags<CR>
nnoremap <leader>fl :w<CR>:CocCommand fzf-preview.BufferLines<CR>
nnoremap <leader>ft :w<CR>:CocCommand fzf-preview.BufferTags<CR>
nnoremap <leader>fg  :w<CR>:CocCommand fzf-preview.Ctags<CR>
let g:fzf_preview_command = 'COLORTERM=truecolor bat --plain --number -r 1:50 -P --color always {-1}'

" coc-yank
nnoremap <silent> <leader>y :<C-u>CocList -A --normal yank<cr>
hi HighlightedyankRegion term=bold ctermbg=0 guibg=#13354A

" vim-fugitive
" relative mappings are <leader>g*
nnoremap <leader>gs :CocCommand fzf-preview.GitStatus<CR>
nnoremap <leader>gc :G commit %<CR>
nnoremap <leader>gl :Gclog<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gd :Gvdiffsplit!<CR>
nnoremap <leader>gm :GMove
nnoremap <leader>gx :GDelete<CR>
nnoremap <leader>gb :Git_blame<CR>
noremap <leader>gv :Gread<CR>

" git-gutter - sign indication for git changes
" I think colours are getting stompted by gruvbox...
let g:gitgutter_sign_allow_clobber = 0
let g:gitgutter_map_keys = 0
highlight GitGutterAdd    guifg=#b8bb26 ctermfg=0
highlight GitGutterChange guifg=#fabd2f ctermfg=11
highlight GitGutterDelete guifg=#fb4934 ctermfg=9
highlight GitGutterChangeDelete guifg=#d3869b ctermfg=13
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = ':'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_removed_above_and_below = '{'
let g:gitgutter_sign_modified_removed = ':-'

" Airline
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#virtualenv#enabled = 0
let g:airline#extensions#poetv#enabled = 0
let g:airline#extensions#obsession#enabled = 1
let g:airline_theme = 'base16_gruvbox_dark_pale'
let g:airline_statusline_ontop = 0
let g:airline_section_x = '%{ObsessionStatus()}'
let g:airline_section_z = "%l:%c"
if !empty($PYENV_VIRTUAL_ENV)
  let g:airline_section_y = "%{split($PYENV_VIRTUAL_ENV, '/')[-1]}"
el
  let g:airline_section_y = ""
endif

" Navigate splits
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-J> <C-w><C-J>
nnoremap <C-K> <C-w><C-K>
nnoremap <C-H> <C-w><C-H>
nnoremap <C-L> <C-w><C-L>

" Slime for tmux
let g:slime_no_mappings = 1
let g:slime_target = "tmux"
let g:slime_paste_file = tempname()
let g:slime_dont_ask_default = 1
let g:slime_default_config = {"socket_name": get(split($TMUX, ","), 0), "target_pane": ":.1"}
let g:slime_preserve_curpos = 1

" File interactions
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>Q :qa!<CR>
nnoremap <leader>n :n 
nnoremap <leader>v :vs 

" Edit settings
nnoremap <leader>sv :vs /Users/pattersonrb/projects/dotfiles/vim/vimrc<CR>
nnoremap <leader>sr :vs /Users/pattersonrb/.vim/ftplugin/R.vim<CR>
nnoremap <leader>sp :vs /Users/pattersonrb/.vim/ftplugin/python.vim<CR>
nnoremap <leader>ss :so $MYVIMRC<CR>

" Buffer interactions
nnoremap <leader>x :w<CR>:bd<CR>

" Browse
nnoremap <leader>e :CocCommand explorer<CR>
nnoremap <leader>tl :CocList todolist<CR>
nnoremap <leader>td :CocCommand todolist.create<CR>
nmap <leader>c :CocCommand<CR>
vmap <leader>c :CocCommand<CR>
" Errors and their navigation
nmap <leader>l :CocCommand fzf-preview.CocCurrentDiagnostics<CR>
nmap <leader>j <Plug>(coc-diagnostic-next)
nmap <leader>k <Plug>(coc-diagnostic-prev)
nmap <leader>a <Plug>(coc-codeaction)

" completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

silent! helptag ALL
